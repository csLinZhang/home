<html>

<head>
<meta http-equiv="Content-Language" content="zh-cn">
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>Computer Vision</title>
</head>

<body>

<p><font size="5" face="Calibri"><b>Camera Calibration Tool </b></font></p>
<h2>
<span style="font-family:&quot;Calibri&quot;">
Introduction</span></h2>
<h2>
<font size="3"><span style="font-family: Calibri; font-weight: 400">The task of 
this project is to develop a desktop application for camera parameter 
calibration. </span></font></h2>
<h2>
¡¡</h2>
<h2>
<span style="font-family: 'Calibri'">Requirements</span></h2>
<p>
<span style="font-family: Calibri">1&gt; In terms of interface design and 
operational logic, you can refer to the camera calibrator app in Matlab, but you 
don't have to be limited to it. The first principle of interface and operational 
logic design should be simplicity, clarity, and user friendliness.</span></p>
<p>
<img border="0" src="camcal1.jpg"></p>
<p>
¡¡</p>
<p>
<span style="font-family: Calibri">2&gt; This tool needs to support both regular 
camera lenses and fisheye camera lenses.</span></p>
<p>
<span style="font-family: Calibri">3&gt; C++ and OpenCV should be used for 
implementation. The library functions of OpenCV can be called to complete the 
core calibration function. Tips: For regular cameras, you need to use &quot;cv:: 
calibrateCamera&quot; and related functions. For fisheye cameras, you need to use &quot;cv:: 
fisheye:: calibrate&quot; and related functions.</span></p>
<p>
<span style="font-family: Calibri">4&gt; The code should be able to support cross 
platform compilation, at least supporting two of the three mainstream desktop 
operating systems: Windows, Ubuntu, and MacOS.</span></p>
<p>¡¡</p>
<p>
<span style="font-family: Calibri">Created on: Nov. 09, 2023</span></p>

</body>

</html>
